{"version":3,"sources":["components/Header.js","components/Layout.js","components/Footer.js","push-notification.js","pages/Welcome.js","pages/Page1.js","pages/Page2.js","routes/Routes.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","Component","Layout","children","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","askForPermissioToReceiveNotifications","a","messaging","firebase","requestPermission","getToken","token","console","log","error","Welcome","style","height","role","aria-label","type","onClick","cogoToast","success","heading","id","smooth","backgroundColor","Page1","css","fontSize","color","Page2","Routes","path","component","exact","withRouter","App","basename","Boolean","window","location","hostname","match","toast","configure","ReactDOM","render","document","getElementById","initializeApp","navigator","serviceWorker","register","scope","then","registration","useServiceWorker","ready","unregister"],"mappings":"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","file":"static/js/main.0ec912e2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Link} from 'react-router-dom';\n\nclass Header extends Component {\n    render() {\n        return (\n            <div>\n               <nav className=\"navbar navbar-light bg-light\">\n                    <span className=\"navbar-brand mb-0 h1\">Navbar</span>\n                    <Link to=\"/\"><div>Home</div></Link>\n                </nav>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport Header from './Header';\nimport Footer from './Footer';\n\nconst Layout = ({children}) => {\n    return ( \n        <div>\n            <Header/>\n                {children}\n            {/* <Footer/> */}\n        </div>\n     );\n}\n \nexport default Layout;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <div>\n                <nav className=\"navbar navbar-light bg-light\">\n                    <a className=\"navbar-brand\" href=\"#\">Footer</a>\n                </nav>\n            </div>\n        );\n    }\n}\n\nexport default Footer;","import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyA-JgzRMNqZh8e1puDEvUPlwBG3idMIs24\",\n    authDomain: \"pntest-d32ab.firebaseapp.com\",\n    databaseURL: \"https://pntest-d32ab.firebaseio.com\",\n    projectId: \"pntest-d32ab\",\n    storageBucket: \"pntest-d32ab.appspot.com\",\n    messagingSenderId: \"244254845020\",\n    appId: \"1:244254845020:web:13a79099e09663a60e9e99\",\n    measurementId: \"G-2TLX2E8HVT\"\n  };\n\n\nexport const initializeFirebase = () => {\n    // if('serviceWorker' in navigator) alert(\"found\")\n    // else alert(\"Not\")\n  firebase.initializeApp(firebaseConfig);\n  navigator.serviceWorker.register('firebase-messaging-sw.js',{ scope: '/' })\n    .then((registration) => {\n      firebase.messaging().useServiceWorker(registration);\n    });\n}\n\nexport const askForPermissioToReceiveNotifications = async () => {\n    try {\n      const messaging = firebase.messaging();\n      await messaging.requestPermission();\n      const token = await messaging.getToken();\n      console.log('token do usu√°rio:', token);\n      \n      return token;\n    } catch (error) {\n      console.error(error);\n    }\n  }","import React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport {Link} from 'react-router-dom';\nimport {HashLink} from 'react-router-hash-link';\nimport { toast } from 'react-toastify';\nimport cogoToast from 'cogo-toast';\nimport { css } from 'glamor';\nimport { askForPermissioToReceiveNotifications } from '../push-notification';\n\nclass Welcome extends Component {\n    render() {\n        return (\n            <Layout>\n                <div style={{height:20000}}>\n                    Welcome to react boiler-plate\n                    <center>\n                    <div className=\"btn-group mt-5\" role=\"group\" aria-label=\"Basic example\">\n                        <button type=\"button\" className=\"btn btn-secondary\" onClick={()=>cogoToast.success(\"hey\",{\n                            heading:'Prabin'\n                        })}>Toast</button>\n                        <Link to=\"/Page1\"><button type=\"button\" className={`btn btn-secondary`}>Page 1</button></Link>\n                        <Link><button type=\"button\" className={`btn btn-secondary`} onClick={askForPermissioToReceiveNotifications}>Ask Push Notification Permission</button></Link>\n                        <Link to=\"/Page2\"><button type=\"button\" className=\"btn btn-secondary\">Page 2</button></Link>\n                    </div>\n                    <br/>\n                    <div id=\"test\" className=\"btn-group mt-5\" role=\"group\" aria-label=\"Basic example\">\n                        <HashLink smooth to=\"#hello\"><button type=\"button\" className=\"btn btn-secondary\">Hello</button></HashLink>\n                        <HashLink  smooth to=\"#hello2\"><button type=\"button\" className=\"btn btn-secondary\">Hello Next</button></HashLink>\n                        <HashLink  smooth to=\"#hello3\"><button type=\"button\" className=\"btn btn-secondary\">Hello Next Next</button></HashLink>\n                    </div>\n                    <div id=\"hello\" style={{backgroundColor:'red',height:500}}>\n                        Hello\n                    </div>\n                    <div  id=\"hello2\"style={{backgroundColor:'blue',height:500}}>\n                        Hello Next\n                    </div>\n                    <div id=\"hello3\" style={{backgroundColor:'green',height:500}}>\n                        Hello Next Next\n                    </div>\n                </center>\n                </div>\n                \n            </Layout>\n        );\n    }\n}\n\nexport default Welcome;\n\nconst styles = {\n    tostaBody:css({\n        fontSize: 100,\n        color: 'pink',\n    }),\n    bodyClassName:css({\n        ':hover':{\n            color:'red'\n        }\n    })\n}","import React, { Component } from 'react';\nimport Layout from '../components/Layout';\n\nclass Page1 extends Component {\n    render() {\n        return (\n            <Layout>\n                <div>\n                    This is Page 1\n                </div>\n            </Layout>\n        );\n    }\n}\n\nexport default Page1;","import React, { Component } from 'react';\nimport Layout from '../components/Layout';\n\nclass Page2 extends Component {\n    render() {\n        return (\n            <Layout>\n                <div>\n                    This is Page 2\n                </div>\n            </Layout>\n        );\n    }\n}\n\nexport default Page2;","import React, {Component} from 'react';\r\nimport {Route, Switch, withRouter} from 'react-router-dom';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport Welcome from '../pages/Welcome';\r\nimport Page1 from '../pages/Page1';\r\nimport Page2 from '../pages/Page2';\r\n\r\nclass Routes extends Component {\r\n\r\n    render () {\r\n        return (\r\n            <Switch>\r\n                <Route path=\"/\" component={Welcome} exact/>\r\n                <Route path=\"/Page1\" component={Page1} exact/>\r\n                <Route path = \"/Page2\" component = {Page2} exact />\r\n\r\n                <Route  component = {()=><h1>NOT FOUND</h1>} exact/>\r\n            </Switch>\r\n        );\r\n    }\r\n} \r\n\r\nexport default withRouter(Routes);","import React from 'react';\nimport Routes from './routes/Routes';\nimport {BrowserRouter} from 'react-router-dom';\n\nfunction App() {\n  return (\n      <BrowserRouter \n        basename=\"/admin\"\n        >\n          <Routes/>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'react-toastify/dist/ReactToastify.css';\nimport { toast } from 'react-toastify';\nimport { initializeFirebase } from './push-notification';\n\ntoast.configure()\nReactDOM.render(<App />, document.getElementById('root'));\ninitializeFirebase()\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}